{"version":3,"sources":["utils/actionTypes.ts","actions/index.ts","components/NumBtn.tsx","components/OperatorBtn.tsx","components/Result.tsx","App.tsx","reducers/calculator.tsx","reducers/index.ts","index.tsx"],"names":["INPUT_NUMBER","PLUS","MINUS","MULTIPLY","DIVIDE","EQUAL","CLEAR","onNumClick","number","type","actionTypes","onPlusClick","onMinusClick","onMultiplyClick","onDivideClick","onEqualClick","onClearClick","NumBtn","n","onClick","className","OperatorBtn","o","Result","result","name","toLocaleString","App","this","props","calculator","actions","console","log","Fragment","inputValue","resultValue","Component","connect","state","dispatch","bindActionCreators","initialAppState","operator","addRecordValue","subtractRecordValue","multyplyRecordValue","calculate","showingResult","action","reducer","combineReducers","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.df1abd4b.chunk.js","sourcesContent":["export const INPUT_NUMBER: string = 'INPUT_NUMBER';\nexport const PLUS: string = 'PLUS';\nexport const MINUS: string = 'MINUS';\nexport const MULTIPLY: string = 'MULTIPLY';\nexport const DIVIDE: string = 'DIVIDE';\nexport const EQUAL: string = 'EQUAL';\nexport const CLEAR: string = 'CLEAR';","import * as actionTypes from '../utils/actionTypes';\n\nexport const onNumClick = number => ({\n  type: actionTypes.INPUT_NUMBER,\n  number,\n});\n\nexport const onPlusClick = () => ({\n  type: actionTypes.PLUS,\n});\n\nexport const onMinusClick = () => ({\n  type: actionTypes.MINUS,\n});\n\nexport const onMultiplyClick = () => ({\n  type: actionTypes.MULTIPLY,\n});\n\nexport const onDivideClick = () => ({\n  type: actionTypes.DIVIDE,\n});\n\nexport const onEqualClick = () => ({\n  type: actionTypes.EQUAL,\n});\n\nexport const onClearClick = () => ({\n  type: actionTypes.CLEAR,\n});","import React from 'react';\n\nconst NumBtn = ({n, onClick}) => {\n    if(n === 0){\n        return <button onClick={onClick} className=\"zero\">{n}</button>;\n    } else {\n        return <button onClick={onClick}>{n}</button>;\n    }\n}\n\nexport default NumBtn;","import React from 'react';\n\nconst OperatorBtn = ({o, onClick}) => {\n    if(o === 'C'){\n        return <button onClick={onClick} className=\"clearKey\">{o}</button>;\n    } else {\n        return <button onClick={onClick}>{o}</button>;\n    }\n}\n\nexport default OperatorBtn;","import React from 'react';\n\nconst Result = ({result, name}) => {\n    if(name === \"formula\"){\n        return <div className=\"formula\">{result}</div>;\n    } else {\n        return <div className=\"resultValue\">{result.toLocaleString()}</div>;\n    }   \n}\n\nexport default Result;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport './App.css';\nimport * as actions from './actions';\nimport NumBtn from './components/NumBtn';\nimport OperatorBtn from './components/OperatorBtn';\nimport Result from './components/Result';\n\nclass App extends Component<Props, {}> {\n  render() {\n    const {calculator, actions} = this.props;\n    console.log(calculator);\n    console.log(actions);\n\n    return (\n      \n      <React.Fragment>\n        <div className=\"App\">\n        <div className=\"result\">\n          <Result result={ calculator.inputValue } name=\"formula\" />\n          <Result result={ calculator.resultValue } />\n        </div>\n        <div className=\"wrapper\">\n          <div className=\"number\">\n            <div>\n              <span className=\"allClear\">\n                <OperatorBtn o={'C'} onClick={() => actions.onClearClick()} />\n              </span>\n            </div>\n            <div>\n              <NumBtn n={7} onClick={() => actions.onNumClick(7)} />\n              <NumBtn n={8} onClick={() => actions.onNumClick(8)} />\n              <NumBtn n={9} onClick={() => actions.onNumClick(9)} />\n            </div>\n            <div>\n              <NumBtn n={4} onClick={() => actions.onNumClick(4)} />\n              <NumBtn n={5} onClick={() => actions.onNumClick(5)} />\n              <NumBtn n={6} onClick={() => actions.onNumClick(6)} />\n            </div>\n            <div>\n              <NumBtn n={1} onClick={() => actions.onNumClick(1)} />\n              <NumBtn n={2} onClick={() => actions.onNumClick(2)} />\n              <NumBtn n={3} onClick={() => actions.onNumClick(3)} />\n            </div>\n            <div>\n              <NumBtn n={0} onClick={() => actions.onNumClick(0)} />\n              <span className=\"equal\">\n                <OperatorBtn o={'.'} onClick={() => actions.onEqualClick()} />\n              </span>\n            </div>\n          </div>\n          <div className=\"operator\">\n            <OperatorBtn o={'รท'} onClick={() => actions.onDivideClick()} />\n            <OperatorBtn o={'ร'} onClick={() => actions.onMultiplyClick()} />\n            <OperatorBtn o={'-'} onClick={() => actions.onMinusClick()} />\n            <OperatorBtn o={'+'} onClick={() => actions.onPlusClick()} />\n            <span className=\"equal\">\n                <OperatorBtn o={'='} onClick={() => actions.onEqualClick()} />\n            </span>\n          </div>\n        </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  calculator: state.calculator,\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    actions: bindActionCreators(actions, dispatch),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import * as actionTypes from '../utils/actionTypes';\n\ninterface initialAppState {\n  inputValue: number,\n  operator: string,\n  resultValue: number,\n  addRecordValue: number,\n  subtractRecordValue: number,\n  multyplyRecordValue: number,\n  calculate: boolean,\n  showingResult: boolean,\n}\n\nconst initialAppState = {\n  inputValue: 0,\n  operator: '',\n  resultValue: 0,\n  addRecordValue: 0,\n  subtractRecordValue: 0,\n  multyplyRecordValue: 0,\n  calculate: false,\n  showingResult: false,\n};\n\nconst calculator = (state = initialAppState, action) => {\n  switch (action.type) {\n    case actionTypes.INPUT_NUMBER:\n      return {\n        ...state,\n        inputValue: state.inputValue + action.number,\n        addRecordValue: state.addRecordValue + action.number,\n        subtractRecordValue: state.subtractRecordValue - action.number,\n        multyplyRecordValue: state.multyplyRecordValue * action.number,\n        showingResult: false,\n      };\n\n    case actionTypes.PLUS:\n      if (state.calculate === true) {\n        return {\n          ...state,\n          inputValue: 0,\n          operator: '+',\n          addRecordValue: state.addRecordValue,\n          calculate: false,\n          resultValue: state.resultValue + state.addRecordValue,\n          showingResult: false,\n        };\n      } else {\n        return {\n          ...state,\n          inputValue: state.inputValue + \"+\",\n          operator: '+',\n          addRecordValue: state.addRecordValue,\n          calculate: true,\n          resultValue: 0,\n          showingResult: true,\n        };\n      }\n\n    case actionTypes.MINUS:\n      if (state.calculate === true) {\n        return {\n          ...state,\n          inputValue: 0,\n          operator: '-',\n          resultValue: state.resultValue - state.inputValue,\n          showingResult: true,\n        };\n      } else {\n        return {\n          ...state,\n          inputValue: 0,\n          operator: '-',\n          subtractRecordValue: state.subtractRecordValue,\n          calculate: true,\n          resultValue: state.inputValue,\n          showingResult: true,\n        };\n      }\n\n    case actionTypes.MULTIPLY:\n      if (state.calculate === true) {\n        return {\n          ...state,\n          inputValue: 0,\n          operator: '*',\n          resultValue: state.resultValue * state.inputValue,\n          showingResult: true,\n        };\n      } else {\n        return {\n          ...state,\n          inputValue: 0,\n          operator: '*',\n          multyplyRecordValue: state.multyplyRecordValue,\n          calculate: true,\n          resultValue: state.inputValue,\n          showingResult: true,\n        };\n      }\n\n    case actionTypes.DIVIDE:\n      if (state.calculate === true) {\n        return {\n          ...state,\n          inputValue: 0,\n          operator: '/',\n          resultValue: state.resultValue / state.inputValue,\n          showingResult: true,\n        };\n      } else {\n        return {\n          ...state,\n          inputValue: 0,\n          operator: '/',\n          calculate: true,\n          resultValue: state.inputValue,\n          showingResult: true,\n        };\n      }\n\n    case actionTypes.CLEAR:\n      return {\n        inputValue: 0,\n        operator: '',\n        calculate: false,\n        addRecordValue: 0,\n        resultValue: 0,\n        showingResult: false,\n      };\n\n    case actionTypes.EQUAL:\n      switch (state.operator) {\n        case '+':\n          return {\n            inputValue: state.inputValue,\n            operator: '',\n            calculate: false,\n            addRecordValue: state.addRecordValue,\n            resultValue: state.addRecordValue,\n            showingResult: true,\n          };\n        case '-':\n          return {\n            inputValue: state.resultValue - state.inputValue,\n            operator: '',\n            calculate: false,\n            resultValue: state.resultValue - state.inputValue,\n            showingResult: true,\n          };\n        case '*':\n          return {\n            inputValue: state.resultValue * state.inputValue,\n            operator: '',\n            calculate: false,\n            resultValue: state.resultValue * state.inputValue,\n            showingResult: true,\n          };\n        case '/':\n          return {\n            inputValue: state.resultValue / state.inputValue,\n            operator: '',\n            calculate: false,\n            resultValue: state.resultValue / state.inputValue,\n            showingResult: true,\n          };\n        default:\n          return state;\n      }\n    default:\n      return state;\n  }\n};\n\nexport default calculator;","import { combineReducers } from 'redux';\nimport calculator from './calculator';\n\nconst reducer = combineReducers({\n  calculator,\n});\n\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport reducer from './reducers';\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}